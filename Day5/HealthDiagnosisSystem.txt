CLASS DiagnosisContext
    ATTRIBUTES:
        strategy : DiagnosisStrategy

    CONSTRUCTOR()
        strategy = null

    METHOD setStrategy(newStrategy : DiagnosisStrategy)
        strategy = newStrategy

    METHOD diagnose(symptoms : List<String>) : List<String>
        RETURN strategy.diagnose(symptoms)
END CLASS


INTERFACE DiagnosisStrategy
    METHOD diagnose(symptoms : List<String>) : List<String>
END INTERFACE


CLASS RuleBasedDiagnosis IMPLEMENTS DiagnosisStrategy
    ATTRIBUTES:
        rules : Map<List<String>, List<String>>

    CONSTRUCTOR()
        rules = {
            ["fever","cough"] : ["Flu", "COVID-19"],
            ["headache","nausea"] : ["Migraine"]
        }

    OVERRIDE METHOD diagnose(symptoms : List<String>) : List<String>
        diseases = []
        FOR ruleSymptoms, ruleDiseases IN rules
            IF symptoms CONTAINS ALL ruleSymptoms THEN
                diseases.ADD_ALL(ruleDiseases)
        RETURN diseases
END CLASS


CLASS AIBasedDiagnosis IMPLEMENTS DiagnosisStrategy
    ATTRIBUTES:
        model : AIModel

    CONSTRUCTOR(model)
        this.model = model

    OVERRIDE METHOD diagnose(symptoms : List<String>) : List<String>
        RETURN model.predict(symptoms)
END CLASS


CLASS ProbabilityBasedDiagnosis IMPLEMENTS DiagnosisStrategy
    ATTRIBUTES:
        probabilityTable : Map<String, Map<String, Float>>

    CONSTRUCTOR(table)
        probabilityTable = table

    OVERRIDE METHOD diagnose(symptoms : List<String>) : List<String>
        results = []
        FOR symptom IN symptoms
            FOR disease, prob IN probabilityTable[symptom]
                results.ADD(disease + " - " + prob)
        RETURN results
END CLASS


// Main Execution
START
    context = NEW DiagnosisContext()
    
    context.setStrategy(NEW RuleBasedDiagnosis())
    PRINT context.diagnose(["fever","cough","fatigue"])
    
    context.setStrategy(NEW AIBasedDiagnosis(model))
    PRINT context.diagnose(["headache","dizziness","nausea"])
    
    context.setStrategy(NEW ProbabilityBasedDiagnosis(probTable))
    PRINT context.diagnose(["fever","cough"])
END
