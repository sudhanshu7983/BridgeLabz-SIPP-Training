CLASS TrieNode
    ATTRIBUTES:
        children : Map<Char, TrieNode>
        isEndOfWord : Boolean
        popularity : Integer

    CONSTRUCTOR()
        children = NEW Map()
        isEndOfWord = false
        popularity = 0
END CLASS


CLASS Trie
    ATTRIBUTES:
        root : TrieNode

    CONSTRUCTOR()
        root = NEW TrieNode()

    METHOD insert(word : String, popularity : Integer)
        node = root
        FOR char IN word
            IF char NOT IN node.children THEN
                node.children[char] = NEW TrieNode()
            node = node.children[char]
        node.isEndOfWord = true
        node.popularity = popularity

    METHOD search(prefix : String, topN : Integer) : List<String>
        node = root
        result = []
        FOR char IN prefix
            IF char NOT IN node.children THEN
                RETURN result
            node = node.children[char]
        DFS(node, prefix, result)
        SORT result BY popularity DESCENDING
        RETURN result[0 to topN-1]

    METHOD DFS(node : TrieNode, currentWord : String, result : List<String>)
        IF node.isEndOfWord THEN
            result.ADD((currentWord, node.popularity))
        FOR char, childNode IN node.children
            DFS(childNode, currentWord + char, result)
END CLASS


// Main Execution
START
    trie = NEW Trie()
    trie.insert("pizza hut", 5)
    trie.insert("pizza point", 3)
    trie.insert("pita bread", 4)
    trie.insert("pizzeria", 2)

    PRINT trie.search("pi", 3)

    trie.insert("pineapple cafe", 6)
    PRINT trie.search("pi", 3)
END
